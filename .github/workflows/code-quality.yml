name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
      if: hashFiles('package.json') != ''
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
      if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''
      
    - name: Install dependencies (Node.js)
      run: npm ci
      if: hashFiles('package.json') != ''
      
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''
      
    - name: Lint JavaScript/TypeScript
      run: |
        npx eslint . --ext .js,.jsx,.ts,.tsx || true
      if: hashFiles('package.json') != ''
      
    - name: Lint Python with flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''
      
    - name: Check Python formatting with black
      run: black --check .
      if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''
      
    - name: Check import sorting with isort
      run: isort --check-only .
      if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''
      
    - name: Type check with mypy
      run: mypy . || true
      if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''
      
    - name: Run SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
      continue-on-error: true
